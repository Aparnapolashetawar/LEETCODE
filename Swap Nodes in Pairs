# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        if not head:
            return None
        elif not head.next:
            return head
        else:
            oddl=[]
            evenl=[]
            li=[]
            p=head
            count=0
            while p:
                if count%2==0:
                    evenl.append(p.val)
                    p=p.next
                else:
                    oddl.append(p.val)
                    p=p.next
                count+=1
            print(oddl)
            print(evenl)
            if len(oddl)==len(evenl):
                for i in range(len(oddl)):
                    li.append(oddl[i])
                    li.append(evenl[i])
            elif len(oddl)>len(evenl):
                for i in range(len(evenl)):
                    li.append(oddl[i])
                    li.append(evenl[i])
                for j in range(len(oddl)-len(evenl),len(oddl)):
                    li.append(oddl[j])
            else:
                for i in range(len(oddl)):
                    li.append(oddl[i])
                    li.append(evenl[i])
                m=len(evenl)-len(oddl)
                n=len(evenl)-m
                for j in range(n,len(evenl)):
                    li.append(evenl[j])
            print(li)
            l=h=ListNode(li[0])
            for i in range(1,len(li)):
                l.next=ListNode(li[i])
                l=l.next
            return h
                
